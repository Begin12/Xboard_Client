package com.byteflow.www.ui.adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.RecyclerView
import com.byteflow.www.R
import com.byteflow.www.databinding.ItemNodeBinding
import com.byteflow.www.models.ClashProxy
import com.byteflow.www.utils.SubscriptionManager

class NodeAdapter(
    private val onNodeClick: (ClashProxy) -> Unit,
    private val onTestLatency: (ClashProxy) -> Unit
) : RecyclerView.Adapter<NodeAdapter.NodeViewHolder>() {
    
    private var nodes = listOf<ClashProxy>()
    private var selectedNodeName = ""
    private val subscriptionManager = SubscriptionManager.getInstance()
    
    fun updateNodes(newNodes: List<ClashProxy>, selectedName: String?) {
        nodes = newNodes
        selectedNodeName = selectedName ?: ""
        notifyDataSetChanged()
    }
    
    fun updateSelectedNode(nodeName: String) {
        selectedNodeName = nodeName
        notifyDataSetChanged()
    }
    
    fun sortNodesByLatency() {
        nodes = nodes.sortedWith(compareBy<ClashProxy> { 
            when (it.latency) {
                -1 -> Int.MAX_VALUE // Êú™ÊµãËØïÁöÑÊéíÂà∞ÊúÄÂêé
                0 -> Int.MAX_VALUE - 1 // Ë∂ÖÊó∂ÁöÑÊéíÂà∞ÂÄíÊï∞Á¨¨‰∫å
                else -> it.latency // Ê≠£Â∏∏Âª∂ËøüÊåâÊï∞ÂÄºÊéíÂ∫è
            }
        })
        notifyDataSetChanged()
    }
    
    fun notifyLatencyUpdated(nodeName: String) {
        val index = nodes.indexOfFirst { it.name == nodeName }
        if (index != -1) {
            notifyItemChanged(index)
        }
    }
    
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): NodeViewHolder {
        val binding = ItemNodeBinding.inflate(
            LayoutInflater.from(parent.context),
            parent,
            false
        )
        return NodeViewHolder(binding)
    }
    
    override fun onBindViewHolder(holder: NodeViewHolder, position: Int) {
        holder.bind(nodes[position])
    }
    
    override fun getItemCount() = nodes.size
    
    inner class NodeViewHolder(
        private val binding: ItemNodeBinding
    ) : RecyclerView.ViewHolder(binding.root) {
        
        fun bind(node: ClashProxy) {
            binding.nodeNameText.text = node.name
            binding.nodeInfoText.text = "${node.server}:${node.port}"
            
            // ËÆæÁΩÆÂä†ÂØÜÊñπÊ≥ïÊòæÁ§∫
            binding.nodeMethodText.text = node.cipher ?: "aes-128-gcm"
            
            // Ëß£ÊûêÂú∞Âå∫‰ø°ÊÅØ
            val region = parseRegion(node.name)
            binding.nodeRegionText.text = region
            
            // ËÆæÁΩÆÂª∂ËøüÊòæÁ§∫
            binding.nodeLatencyText.text = subscriptionManager.getLatencyText(node)
            val latencyColor = subscriptionManager.getLatencyColor(node)
            binding.nodeLatencyText.setTextColor(
                ContextCompat.getColor(binding.root.context, latencyColor)
            )
            
            // ËÆæÁΩÆÊµãËØïÊåâÈíÆ
            binding.nodeTestButton.setOnClickListener {
                onTestLatency(node)
            }
            
            // ËÆæÁΩÆÈÄâ‰∏≠Áä∂ÊÄÅ
            val isSelected = node.name == selectedNodeName
            binding.nodeSelectedIcon.visibility = if (isSelected) 
                android.view.View.VISIBLE else android.view.View.GONE
                
            // ËÆæÁΩÆÈÄâ‰∏≠Áä∂ÊÄÅÁöÑËÉåÊôØËâ≤
            val backgroundColor = if (isSelected) {
                ContextCompat.getColor(binding.root.context, R.color.primary_blue_light)
            } else {
                ContextCompat.getColor(binding.root.context, R.color.background_primary)
            }
            binding.nodeCard.setCardBackgroundColor(backgroundColor)
            
            // ÁÇπÂáª‰∫ã‰ª∂
            binding.root.setOnClickListener {
                onNodeClick(node)
            }
        }
        
        private fun parseRegion(nodeName: String): String {
            return when {
                nodeName.contains("È¶ôÊ∏Ø") || nodeName.contains("HK") -> "üá≠üá∞ È¶ôÊ∏Ø"
                nodeName.contains("Âè∞Êπæ") || nodeName.contains("TW") -> "üáπüáº Âè∞Êπæ"
                nodeName.contains("Êñ∞Âä†Âù°") || nodeName.contains("SG") -> "üá∏üá¨ Êñ∞Âä†Âù°"
                nodeName.contains("Êó•Êú¨") || nodeName.contains("JP") -> "üáØüáµ Êó•Êú¨"
                nodeName.contains("ÁæéÂõΩ") || nodeName.contains("US") -> "üá∫üá∏ ÁæéÂõΩ"
                nodeName.contains("Èü©ÂõΩ") || nodeName.contains("KR") -> "üá∞üá∑ Èü©ÂõΩ"
                nodeName.contains("È©¨Êù•Ë•ø‰∫ö") || nodeName.contains("MY") -> "üá≤üáæ È©¨Êù•Ë•ø‰∫ö"
                nodeName.contains("Ê≥∞ÂõΩ") || nodeName.contains("TH") -> "üáπüá≠ Ê≥∞ÂõΩ"
                nodeName.contains("Ëè≤ÂæãÂÆæ") || nodeName.contains("PH") -> "üáµüá≠ Ëè≤ÂæãÂÆæ"
                nodeName.contains("Ë∂äÂçó") || nodeName.contains("VN") -> "üáªüá≥ Ë∂äÂçó"
                nodeName.contains("Âç∞Â∞º") || nodeName.contains("ID") -> "üáÆüá© Âç∞Â∞º"
                nodeName.contains("Ëã±ÂõΩ") || nodeName.contains("UK") -> "üá¨üáß Ëã±ÂõΩ"
                nodeName.contains("Âæ∑ÂõΩ") || nodeName.contains("DE") -> "üá©üá™ Âæ∑ÂõΩ"
                nodeName.contains("Ê≥ïÂõΩ") || nodeName.contains("FR") -> "üá´üá∑ Ê≥ïÂõΩ"
                nodeName.contains("ÂúüËÄ≥ÂÖ∂") || nodeName.contains("TR") -> "üáπüá∑ ÂúüËÄ≥ÂÖ∂"
                nodeName.contains("Â∑¥Ë•ø") || nodeName.contains("BR") -> "üáßüá∑ Â∑¥Ë•ø"
                nodeName.contains("ÈòøÊ†πÂª∑") || nodeName.contains("AR") -> "üá¶üá∑ ÈòøÊ†πÂª∑"
                nodeName.contains("Á°¨ÁºñÁ†Å") -> "üîß Á°¨ÁºñÁ†Å"
                else -> "üåê ÂÖ∂‰ªñ"
            }
        }
    }
}